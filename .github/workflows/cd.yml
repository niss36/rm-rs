name: Continuous Deployment

on:
  push:
    tags:
      - "v*.*.*"

concurrency:
  group: cd

env:
  CARGO_TERM_COLOR: always
  BIN_NAME: rm-rs

jobs:
  build-binaries:
    name: Build binaries
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            arch: x64
            target: x86_64-unknown-linux-gnu
            runs-on: ubuntu-latest

          - os: linux
            arch: arm64
            target: aarch64-unknown-linux-gnu
            setup: sudo apt-get install -y gcc-aarch64-linux-gnu
            cargo_env: CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            runs-on: ubuntu-latest

          - os: win32
            arch: x64
            target: x86_64-pc-windows-msvc
            runs-on: windows-latest

          - os: win32
            arch: arm64
            target: aarch64-pc-windows-msvc
            runs-on: windows-latest

          - os: darwin
            arch: x64
            target: x86_64-apple-darwin
            runs-on: macos-latest

          - os: darwin
            arch: arm64
            target: aarch64-apple-darwin
            runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Enable debug logging
        if: ${{ runner.debug }}
        run: echo "CARGO_TERM_VERBOSE=true" >> $GITHUB_ENV

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      - name: Setup for build
        if: ${{ matrix.setup }}
        run: ${{ matrix.setup }}

      - name: cargo build
        run: ${{ matrix.cargo_env }} cargo build --release --target=${{ matrix.target }}

      - name: Compute node package name
        id: compute-node-pkg
        shell: bash
        run: |
          node_os=${{ matrix.os }}
          node_arch=${{ matrix.arch }}

          # note: use 'windows' as OS name instead of 'win32' to avoid spam detection
          if [ "${{ matrix.os }}" = "win32" ]; then
            node_pkg="${BIN_NAME}-windows-${node_arch}"
          else
            node_pkg="${BIN_NAME}-${node_os}-${node_arch}"
          fi

          echo "node_pkg=$node_pkg" >> "$GITHUB_OUTPUT"

      - name: Compute binary path
        id: compute-bin-path
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "win32" ]; then
            path="target/${{ matrix.target }}/release/${BIN_NAME}.exe"
          else
            path="target/${{ matrix.target }}/release/${BIN_NAME}"
          fi

          echo "path=$path" >> "$GITHUB_OUTPUT"

      - name: Upload built artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.compute-node-pkg.outputs.node_pkg }}
          path: ${{ steps.compute-bin-path.outputs.path }}
          retention-days: 1

  publish-npm:
    name: Publish NPM packages
    runs-on: ubuntu-latest
    needs: build-binaries
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Download built binaries
        uses: actions/download-artifact@v3
        with:
          path: binaries

      - name: Set the release version
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV

      - name: Generate packages
        shell: bash
        run: |
          cd npm

          bash generate-packages.sh

          cd ../binaries

          for node_pkg in * ; do
            cp "${node_pkg}"/* "../npm/${node_pkg}/bin"
          done

      - name: Publish to NPM
        shell: bash
        run: |
          pnpm install
          pnpm -r build
          pnpm -r publish --access public --no-git-checks --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
